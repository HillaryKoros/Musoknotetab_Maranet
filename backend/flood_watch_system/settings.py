"""
Django settings for flood_watch_system project.
Generated by 'django-admin startproject' using Django 4.1.
"""
import os 
from decouple import config, Csv
from pathlib import Path
from celery.schedules import crontab

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Frontend configuration - point to Vite's dist directory
FRONTEND_DIR = os.path.abspath(os.path.join(BASE_DIR.parent, 'frontend'))
FRONTEND_DIST_DIR = os.path.abspath(os.path.join(FRONTEND_DIR, 'dist'))

# Security settings
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    # Third party apps
    'rest_framework',
    'rest_framework_gis',
    'corsheaders', 
    'rest_framework.authtoken',
    'drf_spectacular',
    'leaflet',
    # Local apps
    'Impact',
    #celery
    'django_celery_beat',
]

# Middleware configuration
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://10.10.1.13:8094",  # Frontend in staging
    "http://10.10.1.13:8090",  # Backend in staging
    "http://127.0.0.1:8094",   # Frontend local
    "http://localhost:8094",   # Frontend local alternative
    "http://197.254.1.10:8094",  # Frontend public
    "http://127.0.0.1:8090",   # Backend local
    "http://localhost:8090",   # Backend local alternative
    "http://197.254.1.10:8090",   # Backend public
   

]
HOST_URL = config('HOST_URL', default='http://197.254.1.10:8094')
# Allowed Hosts
ALLOWED_HOSTS = [
    '10.10.1.13',  # Staging server IP
    'localhost',
    '127.0.0.1',
    '197.254.1.10',  # Public IP
]

# CORS settings
CORS_ALLOW_METHODS = [
    'GET',
    'OPTIONS'
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'origin',
    'user-agent',
]

# URL Configuration
ROOT_URLCONF = 'flood_watch_system.urls'

# Templates Configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI Configuration
WSGI_APPLICATION = 'flood_watch_system.wsgi.application'

# Database Configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),#'db''flood_watch_postgis',
        'PORT': config('DB_PORT'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Africa/Nairobi'
USE_I18N = True
USE_TZ = True

# Static files configuration
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = []

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}


# celery
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'  


CELERY_BEAT_SCHEDULE = {
    'merge-jsonfiles-at-noon': {
        'task': 'Impact.tasks.run_management_command',
        'schedule': crontab(hour=12, minute=0),
        'args': ('merge_jsonFiles',), 
    },
    'syncD-shapefiles-at-noon': {
        'task': 'Impact.tasks.run_management_command',
        'schedule': crontab(hour=12, minute=5),
        'args': ('syncD_shapefiles',),
    },
    'sync-tiffs-at-noon': {
        'task': 'Impact.tasks.run_management_command',
        'schedule': crontab(hour=12, minute=10),
        'args': ('sync_tiffs',),
    },
}
# DRF Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Flood Watch System API',
    'DESCRIPTION': 'API for managing flood impact data',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}
# In settings.py
MAPSERVER_RASTER_DIR = os.path.join(BASE_DIR, 'mapserver', 'data', 'rasters')


SITE_ID = 1
services:
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: flood_watch_system_backend:v1.1
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    ports:
      - "8090:8000"
    environment:
      - DB_HOST=postgis
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=10.10.1.13,127.0.0.1,localhost,0.0.0.0
      - DJANGO_SETTINGS_MODULE=flood_watch_system.settings
      - SFTP_HOST=${SFTP_HOST}
      - SFTP_PORT=${SFTP_PORT}
      - SFTP_USERNAME=${SFTP_USERNAME}
      - SFTP_PASSWORD=${SFTP_PASSWORD}
      - REMOTE_FOLDER_BASE=${REMOTE_FOLDER_BASE}
      - JSON_REMOTE_DIR=${JSON_REMOTE_DIR}
      - SHAPEFILE_REMOTE_DIR=${SHAPEFILE_REMOTE_DIR}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: kartoza/postgis:15-3.3
    container_name: postgis
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgis_data:/var/lib/postgresql/data/pgdata
    ports:
      - "8091:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "8092:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  geoserver:
    image: kartoza/geoserver:2.22.2
    container_name: geoserver
    ports:
      - "8093:8080"
    environment:
      - GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD:-geoserver}
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER:-admin}
      - INITIAL_MEMORY=1G
      - MAXIMUM_MEMORY=2G
      - STABLE_EXTENSIONS=charts-plugin,control-flow-plugin
      - JAVA_OPTS=-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops -XX:+OptimizeStringConcat
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
      - geoserver_styles:/opt/geoserver/styles
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/geoserver/web/"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: flood_watch_system_frontend:v1.1
    ports:
      - "8094:8080"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://127.0.0.1:8090
      - VITE_GEOSERVER_URL=http://127.0.0.1:8093
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  geoserver_data:
    driver: local
  geoserver_styles:
    driver: local
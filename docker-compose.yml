services:
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: hkoros/flood_watch_system_backend:v1.2
    container_name: flood_watch_backend
    command: gunicorn flood_watch_system.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - ./data:/etc/mapserver/data:z  # Use local data folder instead of volume
    ports:
      - "8090:8000"
    environment:
      - DB_HOST=flood_watch_postgis
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DEBUG=1
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=10.10.1.13,127.0.0.1,localhost,0.0.0.0,197.254.1.10
      - DJANGO_SETTINGS_MODULE=flood_watch_system.settings
      - SFTP_HOST=${SFTP_HOST}
      - SFTP_PORT=${SFTP_PORT}
      - SFTP_USERNAME=${SFTP_USERNAME}
      - SFTP_PASSWORD=${SFTP_PASSWORD}
      - REMOTE_FOLDER_BASE=${REMOTE_FOLDER_BASE}
      - JSON_REMOTE_DIR=${JSON_REMOTE_DIR}
      - SHAPEFILE_REMOTE_DIR=${SHAPEFILE_REMOTE_DIR}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: hkoros/flood_watch_system_celery_worker:v1.2
    container_name: flood_watch_celery_worker
    command: celery -A flood_watch_system worker -l info
    volumes:
      - ./data:/etc/mapserver/data:z  # Use local data folder instead of volume
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=flood_watch_postgis
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=flood_watch_system.settings
      - SFTP_HOST=${SFTP_HOST}
      - SFTP_PORT=${SFTP_PORT}
      - SFTP_USERNAME=${SFTP_USERNAME}
      - SFTP_PASSWORD=${SFTP_PASSWORD}
      - JSON_REMOTE_DIR=${JSON_REMOTE_DIR}
      - SHAPEFILE_REMOTE_DIR=${SHAPEFILE_REMOTE_DIR}
    depends_on:
      - web
      - redis
    networks:
      - app-network
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: hkoros/flood_watch_system_celery_beat:v1.2
    container_name: flood_watch_celery_beat
    command: celery -A flood_watch_system beat -l info
    volumes:
      - ./data:/etc/mapserver/data:z  # Use local data folder instead of volume
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=flood_watch_postgis
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=flood_watch_system.settings
    depends_on:
      - web
      - redis
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: hkoros/floodwatch_postgis:v1.2
    container_name: flood_watch_postgis
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgis_data:/var/lib/postgresql/data/pgdata
    ports:
      - "8091:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: hkoros/redis:v1.2
    container_name: flood_watch_redis
    ports:
      - "8092:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  mapserver:
    build:
      context: ./data
      dockerfile: Dockerfile
    image: hkoros/floodwatch_mapserver:v1.1
    container_name: flood_watch_mapserver
    ports:
      - "8093:80"
    volumes:
      - ./data/shapefiles:/data/shapefiles:z  # GeoJSON data directory with z flag for SELinux
      - ./data/mapfiles:/etc/mapserver:z  # MapServer config with z flag for SELinux
    user: "0:0"
    environment:
      - MS_MAPFILE=/etc/mapserver/master.map
      - MS_ERRORFILE=/tmp/mapserver_error.log
      - MS_DEBUGLEVEL=5
    command: ["apache2ctl", "-D", "FOREGROUND"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/cgi-bin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: hkoros/flood_watch_system_frontend:v1.2
    container_name: flood_watch_frontend
    ports:
      - "8094:8080"
    volumes:
      - static_volume:/frontend/static
      - media_volume:/frontend/media
      - ./data:/etc/mapserver/data  # Use local data folder instead of volume
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8090  # Use localhost instead of IP
      - VITE_MAPSERVER_URL=http://localhost:8093  # Use localhost instead of IP
    depends_on:
      - web
      - mapserver
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/16

volumes:
  postgis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local